plugins {
  id 'java-library'
  id 'maven-publish'
}

repositories {

  mavenCentral()

  maven {
    url "https://maven.scijava.org/content/repositories/releases"
  }

  maven {
    url "https://maven.scijava.org/content/repositories/snapshots"
  }

}

description = 'Support for parsing the BioImage Model Zoo spec in Java'

version = "0.2.0-SNAPSHOT"

dependencies {
    // These are included in QuPath distribution
    implementation "org.slf4j:slf4j-api:2.0.4"
    implementation 'org.yaml:snakeyaml:2.0'
    implementation 'com.google.code.gson:gson:2.10'

    testImplementation "org.junit.jupiter:junit-jupiter:5.9.1"
    testImplementation 'ch.qos.logback:logback-classic:1.5.16'
}

processResources {
  from ("${projectDir}/LICENSE") {
    into 'licenses/'
  }
}

/*
 * Ensure Java 11 compatibility
 */
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
    withSourcesJar()
    withJavadocJar()
}

/*
 * Set module info
 */
tasks.named('compileJava') {
    // use the project's version or define one directly
    options.javaModuleVersion = provider { project.version }
    options.encoding = 'UTF-8'
}

/*
 * Manifest info
 */
jar {
    manifest {
        attributes("Implementation-Title": project.name,
                   "Implementation-Version": archiveVersion)
    }
}

/*
 * Create javadocs for all modules/packages in one place.
 * Use -PstrictJavadoc=true to fail on error with doclint (which is rather strict).
 */
tasks.withType(Javadoc) {
	options.encoding = 'UTF-8'
	def strictJavadoc = findProperty('strictJavadoc')
	if (!strictJavadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
	}
}

/*
 * Avoid 'Entry .gitkeep is a duplicate but no duplicate handling strategy has been set.'
 * when using withSourcesJar()
 */
tasks.withType(org.gradle.jvm.tasks.Jar) {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

tasks.named('test') {
    useJUnitPlatform()
}

test {
	// Optional base directory containing models
	def testModels = project.findProperty("models")
	if (testModels)
		systemProperty "models", testModels
    // Optional parameter for how many subdirectories deep to look for models
	def testDepth = project.findProperty("depth")
	if (testDepth)
		systemProperty "depth", depth
}


publishing {
    repositories {
        maven {
            name = "SciJava"
            def releasesRepoUrl = uri("https://maven.scijava.org/content/repositories/releases")
            def snapshotsRepoUrl = uri("https://maven.scijava.org/content/repositories/snapshots")
            // Use gradle -Prelease publish
            url = project.hasProperty('release') ? releasesRepoUrl : snapshotsRepoUrl
            credentials {
                username = System.getenv("MAVEN_USER")
                password = System.getenv("MAVEN_PASS")
            }
        }
    }

    publications {
        mavenJava(MavenPublication) {
            groupId = 'io.github.qupath'
            from components.java

            pom {
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://www.opensource.org/licenses/mit-license.php'
                    }
                }
            }
        }
    }
}
